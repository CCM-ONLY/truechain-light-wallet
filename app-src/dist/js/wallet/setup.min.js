'use strict';
mui.plusReady(function() {
	let host = plus.storage.getItem('web3Host');
	let trueContractAddr, ttrContractAddr;
	let reg = /https:\/\/ropsten.infura.io/;
	if(!host) {
		host = 'https://mainnet.infura.io/';
		trueContractAddr = "0xa4d17ab1ee0efdd23edc2869e7ba96b89eecf9ab";
		ttrContractAddr = "0xf2bb016e8c9c8975654dcd62f318323a8a79d48e";
	} else if(reg.test(host)) {
		trueContractAddr = "0x2792d677B7Ba6B7072bd2293F64BC0C1CDe23ac1";
		ttrContractAddr = "0x635AfeB8739f908A37b3d312cB4958CB2033F456";
	} else {
		trueContractAddr = "0xa4d17ab1ee0efdd23edc2869e7ba96b89eecf9ab";
		ttrContractAddr = "0xf2bb016e8c9c8975654dcd62f318323a8a79d48e";
	}

	(function() {
		var web3 = new Web3();
		var Validate = {
			$maskerLoading: $('.masker-loading'),
			$blackMask: $('.masker-black'),
			//初始化
			walletName: null,
			pwd: null,
			repwd: null,
			isEmpty: true,
			//验证是否通过 
			walletNameFlag: false,
			pwdFlag: false,
			repwdFlag: false,
			agreeFlag: false,
			//验证正则
			init: function init() {
				this.submitForm();
			},
			checkEmpty: function checkEmpty(val) {
				if(val) {
					this.isEmpty = false;
				}
			},
			checkName: function checkName(elements, errContainer) {
				let reg = /\s/g;
				this.walletName = $(elements).val();
				//this.checkEmpty(this.walletName);
				if(!this.walletName) {
					this.walletNameFlag = false;
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("钱包名称不能为空");
				} else if(this.walletName.length > 15) {
					this.walletNameFlag = false;
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("钱包名称长度不能超过15位");
				} else if(reg.test(this.walletName)) {
					this.walletNameFlag = false;
					$(errContainer).html("钱包名称不能有空格");
				} else {
					this.walletNameFlag = true;
					$(errContainer).addClass("mui-hidden");
					$(errContainer).text("");
				}
				return this;
			},
			checkPwd: function checkPwd(elements, errContainer) {
				this.pwd = $(elements).val();
				//this.checkEmpty(this.pwd);
				if(!this.pwd) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("密码不能为空");
					this.pwdFlag = false;
					return;
				} else if(this.pwd.length < 8 || this.pwd.length > 18) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("8-18位字符，建议混合大小写字母、数字、特殊字符");
					this.pwdFlag = false;
					return;
				} else {
					this.pwdFlag = true;
					$(errContainer).addClass("mui-hidden");
					$(errContainer).text("");
				}
				return this;
			},
			checkRepwd: function checkRepwd(elements, errContainer) {
				this.repwd = $(elements).val();
				//this.checkEmpty(this.repwd);
				if(!this.repwd) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("确认密码不能为空");
					this.repwdFlag = false;
					return;
				} else if(this.repwd !== this.pwd) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("两次输入的密码不一致");
					this.repwdFlag = false;
					return;
				} else {
					this.repwdFlag = true;
					$(errContainer).addClass("mui-hidden");
					$(errContainer).text("");
				}
				return this;
			},
			checkAgree: function checkAgree() {
				var that = this;
				this.agreeFlag = $('.mui-checkbox input')[0].checked;
			},
			setWeb3Provider: function setWeb3Provider(keystore) {
				var web3Provider = new HookedWeb3Provider({
					host: host,
					transaction_signer: keystore
				});
				web3.setProvider(web3Provider);
			},
			newWallet: function newWallet(password, callback) {
				var randomSeed = lightwallet.keystore.generateRandomSeed();
				lightwallet.keystore.createVault({
					password: password,
					seedPhrase: randomSeed,
					hdPathString: "m/44'/60'/0'/0"
				}, function(err, ks) {
					ks.keyFromPassword(password, function(err, pwDerivedKey) {
						ks.generateNewAddress(pwDerivedKey, 1);
						var addresses = ks.getAddresses();
						callback(addresses, ks);
					})
				})
			},
			submitForm: function submitForm() {
				var that = this;
				$("#star-setup").on('tap', function() {
					that.checkName('.e-wallet-name', '.name-error');
					that.checkPwd('.e-wallet-pwd', '.pwd-error');
					that.checkRepwd('.e-wallet-repwd', '.repwd-error');
					that.checkAgree();
					if(that.walletNameFlag && that.pwdFlag && that.repwdFlag) {
						if(that.agreeFlag) {
							$(this).addClass("mui-disabled");
							that.showLoading(true, true);
							that.newWallet(that.pwd, function(address, keystore) {
								keystore.keyFromPassword(that.pwd, function(err, pwDerivedKey) {
									keystore.generateNewAddress(pwDerivedKey, 1);
									var addr = keystore.getAddresses();
									let add = [];
									add.push('0x' + addr[0]);
									let PrivateKey = keystore.exportPrivateKey(add[0], pwDerivedKey);
									let keystoreBefore = web3.eth.accounts.privateKeyToAccount('0x' + PrivateKey);
									let keys = keystoreBefore.encrypt(that.pwd);
									plus.storage.setItem('walletAddress', '0x' + addr[0]);
									plus.storage.setItem('keystore2', keystore.serialize());
									plus.storage.setItem('keystore3', JSON.stringify(keys));
									plus.storage.setItem('walletName', that.walletName);
									plus.storage.setItem('initialized', 'true');
									setTimeout(function() {
										mui.openWindow('../../asset/defaultExportMw.html', 'defaultExportMw');
										that.showLoading(false, false);
									}, 1000);
								});
							});
							//							that.newWallet(that.pwd, function(address, ks) {
							//								plus.storage.setItem('walletAddress', '0x' + address[0]);
							//								plus.storage.setItem('keystore', ks.serialize());
							//								plus.storage.setItem('walletName', that.walletName);
							//								plus.storage.setItem('initialized', 'true');
							//								mui.toast("创建成功");
							//								setTimeout(function() {
							//									mui.openWindow('../../../index.html', 'index');
							//									that.showLoading(false, false);
							//								}, 1000);
							//							})
						} else {
							mui.toast('请同意《服务及隐私条款》');
						}
					}
				});
			},
			showLoading: function showLoading(show) {
				var masker = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
				this.$maskerLoading[0].className = show ? 'masker-loading' : 'masker-loading mui-hidden';
				this.$blackMask[0].className = masker ? 'masker-black' : 'masker-black mui-hidden';
			}
		};
		Validate.init();
	})();
})