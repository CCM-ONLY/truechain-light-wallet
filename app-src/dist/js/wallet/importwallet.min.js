'use strict';
mui.plusReady(function() {
	h('.ercode-icon').tap(function() {
		openInfo('ercode.html');
	});

	let host = plus.storage.getItem('web3Host');
	if(!host) {
		host = 'https://mainnet.infura.io/';
	}

	(function() {
		var web3 = new Web3();
		var Validate = {
			$maskerLoading: $('.masker-loading'),
			$blackMask: $('.masker-black'),
			//初始化
			walletName: null,
			memorizingWords: null,
			pwd: null,
			repwd: null,
			KeyStore: null,
			privateKey: null,
			isEmpty: true,
			//验证是否通过 
			wordsFlag: false,
			privateKeyFlag: false,
			KeyStoreFlag: false,
			walletNameFlag: false,
			pwdFlag: false,
			repwdFlag: false,
			agreeFlag: false,
			//验证正则
			init: function init() {
				this.submitForm();
			},
			checkEmpty: function checkEmpty(val) {
				if(val) {
					this.isEmpty = false;
				}
			},
			checkMemorizingWords: function(elements) {
				let that = this;
				this.memorizingWords = $(elements).val();
				if(this.memorizingWords) {
					that.wordsFlag = true;
					return
				} else {
					that.wordsFlag = false;
					mui.alert('助记词不能为空!')
					return
				}
			},
			checkKeyStore: function(elements) {
				let that = this;
				this.KeyStore = $(elements).val();
				if(this.KeyStore) {
					that.KeyStoreFlag = true;
					return
				} else {
					that.KeyStoreFlag = false;
					mui.alert('keyStore不能为空!')
					return
				}
			},
			checkPrivatekey: function(elements) {
				let that = this;
				this.privateKey = $(elements).val();
				if(this.privateKey) {
					that.privateKeyFlag = true;
					return
				} else {
					that.privateKeyFlag = false;
					mui.alert('私钥不能为空!')
					return
				}
			},
			checkName: function checkName(elements, errContainer) {
				this.walletName = $(elements).val();
				this.checkEmpty(this.walletName);
				if(this.isEmpty) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("钱包路径不能为空");
				} else if(this.walletName.length > 16) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("钱包名称长度不能超过16位");
				} else {
					this.walletNameFlag = true;
					$(errContainer).addClass("mui-hidden");
					$(errContainer).text("");
				}
				return this;
			},
			checkPwd: function checkPwd(elements, errContainer) {
				this.pwd = $(elements).val();
				this.checkEmpty(this.pwd);
				if(this.isEmpty) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("密码不能为空");
					return;
				} else if(this.pwd.length < 8 || this.pwd.length > 18) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("8-18位字符，建议混合大小写字母、数字、特殊字符");
					return;
				} else {
					this.pwdFlag = true;
					$(errContainer).addClass("mui-hidden");
					$(errContainer).text("");
				}
				return this;
			},
			checkRepwd: function checkRepwd(elements, errContainer) {
				this.repwd = $(elements).val();
				this.checkEmpty(this.repwd);
				if(this.isEmpty) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("确认密码不能为空");
					return;
				} else if(this.repwd !== this.pwd) {
					$(errContainer).removeClass("mui-hidden");
					$(errContainer).text("两次输入的密码不一致");
					return;
				} else {
					this.repwdFlag = true;
					$(errContainer).addClass("mui-hidden");
					$(errContainer).text("");
				}
				return this;
			},
			checkAgree: function checkAgree() {
				var that = this;
				this.agreeFlag1 = $('.mui-checkbox input')[0].checked;
				this.agreeFlag2 = $('.mui-checkbox input')[1].checked;
				//this.agreeFlag3 = $('.mui-checkbox input')[2].checked;
			},
			setSeed: function setSeed(seed, password, callback, hdPathString = "m/44'/60'/0'/0") {
				let that = this;
				lightwallet.keystore.createVault({
					password: password,
					seedPhrase: seed,
					hdPathString: hdPathString
				}, function(err, ks) {
					if(err) {
						mui.alert('助记词无效,请输入正确助记词!');
						that.showLoading(false, false);
						return;
					} else {
						ks.keyFromPassword(password, function(err, pwDerivedKey) {
							if(err) throw err;
							ks.generateNewAddress(pwDerivedKey, 1);
							var address = ks.getAddresses();
							let PrivateKey = ks.exportPrivateKey('0x' + address[0], pwDerivedKey);
							let keystoreBefore = web3.eth.accounts.privateKeyToAccount('0x' + PrivateKey);
							let keys = keystoreBefore.encrypt(that.pwd);
							callback(address, keys);
							//							ks.passwordProvider = function(cb) {
							//								var pw = prompt("Please enter password", "Password");
							//								cb(null, pw);
							//							};
						});
						mui.toast("创建成功,请稍等!");
					}
				})
			},
			keyStoreImport: function keyStoreImport(serialized_keystore, password, callback) {
				var that = this;
				var keystore = lightwallet.keystore.deserialize(serialized_keystore);
				keystore.keyFromPassword(password, function(err, pwDerivedKey) {
					if(err) {
						that.showLoading(false, false);
						$('.star-import2').removeClass('mui-disabled');
						mui.alert('密码验证错误,请重新输入!');
					} else {
						keystore.generateNewAddress(pwDerivedKey, 1);
						var addr = keystore.getAddresses();
						callback(addr, serialized_keystore);
					}
				});

				var web3Provider = new HookedWeb3Provider({
					host: host, // 以太坊正式网
					transaction_signer: keystore
				});
				web3.setProvider(web3Provider);
			},
			//私钥导入 ----------------------------------------
			privateKeyImport: function(privateKey) {
				//				var web3Provider = new HookedWeb3Provider({
				//					host: host,
				//					//transaction_signer: keystore
				//					transaction_signer: {
				//						hasAddress: function(address, callback) {
				//							callback(null, true);
				//						},
				//						signTransaction: function(tx_params, callback) {
				//							var rawTx = {
				//								gasPrice: web3.toHex(tx_params.gasPrice),
				//								gasLimit: web3.toHex(tx_params.gas),
				//								value: web3.toHex(tx_params.value),
				//								from: tx_params.from,
				//								to: tx_params.to,
				//								nonce: web3.toHex(tx_params.nonce),
				//								data: web3.toHex(tx_params.data)
				//							};
				//							console.log('tx_params_data: ' + tx_params.data);
				//							var tx = new ethereumjs.Tx(rawTx);
				//							var privateKey = '9549d6b8a48e136e27d317feae7a50a180fe2f7757d0e5fd0d9e2c6e94fa53ab';
				//							privateKey = new ethereumjs.Buffer.Buffer(privateKey, 'hex');
				//							tx.sign(privateKey);
				//							var serializedTx = '0x' + tx.serialize().toString('hex');
				//							callback(null, serializedTx);
				//						}
				//					}
				//				});
				//
				//				web3.setProvider(web3Provider);
				//				let ks = web3Provider.transaction_signer
				//				ks.keyFromPassword('88888888', function(err, pwDerivedKey) {
				//					if(err) {
				//
				//					} else {
				//						ks.generateNewAddress(pwDerivedKey, 1);
				//						var addr = keystore.getAddresses();
				//						console.log(addr, '---===')
				//					}
				//				});

			},
			submitForm: function submitForm() {
				var that = this;
				//根据助记词导入钱包
				$(".star-import1").on('tap', function() {
					that.checkMemorizingWords('.order');
					that.checkName('.e-wallet-name', '.name-error');
					that.checkPwd('.e-wallet-pwd', '.pwd-error');
					that.checkRepwd('.e-wallet-repwd', '.repwd-error');
					that.checkAgree();
					if(that.wordsFlag && that.walletNameFlag && that.pwdFlag && that.repwdFlag) {
						if(that.agreeFlag1) {
							$(this).addClass("mui-disabled");
							that.showLoading(true, true);
							that.setSeed(that.memorizingWords, that.pwd, function(address, keys) {
								plus.storage.setItem('walletAddress', '0x' + address[0]);
								plus.storage.setItem('walletName', '新钱包');
								plus.storage.setItem('initialized', 'true');
								plus.storage.setItem('keystore', JSON.stringify(keys));
								that.showLoading(false, false);
								mui.openWindow('../../../index.html', 'index')
							})
						} else {
							mui.toast('请同意《服务及隐私条款》');
						}
					}
				});
				//根据keystore导入钱包
				$(".star-import2").on('tap', function() {
					that.pwd = $('.e-wallet-pwd2').val();
					that.checkKeyStore('.keystorecontent')
					//that.checkPwd('.e-wallet-pwd2', '.pwd-error2');
					that.checkAgree();
					if(that.KeyStoreFlag) {
						//if(that.pwdFlag) {
						if(that.agreeFlag2) {
							$(this).addClass("mui-disabled");
							if(that.KeyStoreFlag) {
								//keystore导入钱包
								that.showLoading(true, true);
								that.keyStoreImport(that.KeyStore, that.pwd, function(address, ks) {
									//that.showLoading(true, true);
									mui.toast("创建成功");
									plus.storage.setItem('walletAddress', address[0]);
									plus.storage.setItem('keystore', ks);
									setTimeout(function() {
										mui.openWindow('../../../index.html', 'index');
										that.showLoading(false, false);
									}, 2000);
								})
							}
						} else {
							mui.toast('请同意《服务及隐私条款》');
						}
						//}
					}
				});
				//根据私钥导入钱包
				//				$(".star-import3").on('tap', function() {
				//					that.checkPrivatekey('.privateContent');
				//					that.checkPwd('.e-wallet-pwd3', '.pwd-error3');
				//					that.checkRepwd('.e-wallet-repwd3', '.repwd-error3');
				//					that.checkAgree();
				//					if(that.privateKeyFlag) {
				//						if(that.pwdFlag && that.repwdFlag) {
				//							if(that.agreeFlag3) {
				//								$(this).addClass("mui-disabled");
				//								that.showLoading(true, true);
				//								that.privateKeyImport(that.privateKey);
				//								mui.toast("创建成功");
				//								//						setTimeout(function() {
				//								//							mui.openWindow('../../../asset.html', 'asset');
				//								//							that.showLoading(false, false);
				//								//						}, 3000);
				//							} else {
				//								mui.toast('请同意《服务及隐私条款》');
				//							}
				//						}
				//					}
				//
				//				});
			},
			showLoading: function showLoading(show) {
				var masker = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

				this.$maskerLoading[0].className = show ? 'masker-loading' : 'masker-loading mui-hidden';
				this.$blackMask[0].className = masker ? 'masker-black' : 'masker-black mui-hidden';
			}
		};
		Validate.init();
	})();

})